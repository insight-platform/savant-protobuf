syntax = "proto3";

// This file defines protobuf scheme for Savant protocol.
// It is used to communicate between Savant and 3rd-party programs.

package protocol;

message BytesAttributeValueVariant {
  repeated int64 dims = 1;
  bytes data = 2;
}

message StringAttributeValueVariant {
  string data = 1;
}

message StringVectorAttributeValueVariant {
  repeated string data = 1;
}

message IntegerAttributeValueVariant {
  int64 data = 1;
}

message IntegerVectorAttributeValueVariant {
  repeated int64 data = 1;
}

message FloatAttributeValueVariant {
  double data = 1;
}

message FloatVectorAttributeValueVariant {
  repeated double data = 1;
}

message BooleanAttributeValueVariant {
  bool data = 1;
}

message BooleanVectorAttributeValueVariant {
  repeated bool data = 1;
}

message BoundingBox {
  float xc = 1;
  float yc = 2;
  float width = 3;
  float height = 4;
  optional float angle = 5;
}

message BoundingBoxAttributeValueVariant {
  BoundingBox data = 1;
}

message BoundingBoxVectorAttributeValueVariant {
  repeated BoundingBox data = 1;
}

message Point {
  float x = 1;
  float y = 2;
}

message PointAttributeValueVariant {
  Point data = 1;
}

message PointVectorAttributeValueVariant {
  repeated Point data = 1;
}

message PolygonalAreaTag {
  optional string tag = 1;
}

message PolygonalAreaTags {
  repeated PolygonalAreaTag tags = 1;
}

message PolygonalArea {
  repeated Point points = 1;
  PolygonalAreaTags tags = 2;
}

message PolygonAttributeValueVariant {
  PolygonalArea data = 1;
}

message PolygonVectorAttributeValueVariant {
  repeated PolygonalArea data = 1;
}

enum IntersectionKind {
  ENTER = 0;
  INSIDE = 1;
  LEAVE = 2;
  CROSS = 3;
  OUTSIDE = 4;
}

message IntersectionEdge {
  uint64 id = 1;
  optional string tag = 2;
}

message Intersection {
  IntersectionKind kind = 1;
  repeated IntersectionEdge edges = 2;
}

message IntersectionAttributeValueVariant {
  Intersection data = 1;
}

message NoneAttributeValueVariant {
}

message TemporaryValueVariant {}

message AttributeValue {
  optional float confidence = 1;
  oneof value {
    BytesAttributeValueVariant bytes = 2;
    StringAttributeValueVariant string = 3;
    StringVectorAttributeValueVariant string_vector = 4;
    IntegerAttributeValueVariant integer = 5;
    IntegerVectorAttributeValueVariant integer_vector = 6;
    FloatAttributeValueVariant float = 7;
    FloatVectorAttributeValueVariant float_vector = 8;
    BooleanAttributeValueVariant boolean = 9;
    BooleanVectorAttributeValueVariant boolean_vector = 10;
    BoundingBoxAttributeValueVariant bounding_box = 11;
    BoundingBoxVectorAttributeValueVariant bounding_box_vector = 12;
    PointAttributeValueVariant point = 13;
    PointVectorAttributeValueVariant point_vector = 14;
    PolygonAttributeValueVariant polygon = 15;
    PolygonVectorAttributeValueVariant polygon_vector = 16;
    IntersectionAttributeValueVariant intersection = 17;
    NoneAttributeValueVariant none = 18;
    TemporaryValueVariant temporary = 19;
  }
}

message Attribute {
  string namespace = 1;
  string name = 2;
  repeated AttributeValue values = 3;
  optional string hint = 4;
  bool is_persistent = 5;
  bool is_hidden = 6;
}

message UserData {
  string source_id = 1;
  repeated Attribute attributes = 2;
}

message ObjectAttribute {
  int64 object_id = 1;
  Attribute attribute = 2;
}

message VideoObject {
  int64 id = 1;
  optional int64 parent_id = 2;
  string namespace = 3;
  string label = 4;
  optional string draw_label = 5;
  BoundingBox detection_box = 6;
  repeated Attribute attributes = 7;
  optional float confidence = 8;
  optional BoundingBox track_box = 9;
  optional int64 track_id = 10;
}

message VideoObjectWithForeignParent {
  VideoObject object = 1;
  optional int64 parent_id = 2;
}

enum AttributeUpdatePolicy {
  REPLACE_WITH_FOREIGN = 0;
  KEEP_OWN = 1;
  ERROR = 2;
}

enum ObjectUpdatePolicy {
  ADD_FOREIGN_OBJECTS = 0;
  ERROR_IF_LABELS_COLLIDE = 1;
  REPLACE_SAME_LABEL_OBJECTS = 2;
}

message VideoFrameUpdate {
  repeated Attribute frame_attributes = 1;
  repeated ObjectAttribute object_attributes = 2;
  repeated VideoObjectWithForeignParent objects = 3;
  AttributeUpdatePolicy frame_attribute_policy = 4;
  AttributeUpdatePolicy object_attribute_policy = 5;
  ObjectUpdatePolicy object_policy = 6;
}

message EndOfStream {
  string source_id = 1;
}

message Unknown {
  string message = 1;
}

message Shutdown {
  string auth = 1;
}

enum VideoFrameTranscodingMethod {
  COPY = 0;
  ENCODED = 1;
}

message ExternalFrame {
  string method = 1;
  optional string location = 2;
}

message NoneFrame {}

message InitialSize {
  uint64 width = 1;
  uint64 height = 2;
}

message Scale {
  uint64 width = 1;
  uint64 height = 2;
}

message Padding {
  uint64 padding_left = 1;
  uint64 padding_top = 2;
  uint64 padding_right = 3;
  uint64 padding_bottom = 4;
}

message ResultingSize {
  uint64 width = 1;
  uint64 height = 2;
}

message VideoFrameTransformation {
  oneof transformation {
    InitialSize initial_size = 1;
    Scale scale = 2;
    Padding padding = 3;
    ResultingSize resulting_size = 4;
  }
}

message VideoFrame {
  optional int64 previous_frame_seq_id = 1;
  string source_id = 2;
  string uuid = 3;
  uint64 creation_timestamp_ns_high = 4;
  uint64 creation_timestamp_ns_low = 5;
  string framerate = 6;
  int64 width = 7;
  int64 height = 8;
  VideoFrameTranscodingMethod transcoding_method = 9;
  optional string codec = 10;
  optional bool keyframe = 11;
  int32 time_base_numerator = 12;
  int32 time_base_denominator = 13;
  int64 pts = 14;
  optional int64 dts = 15;
  optional int64 duration = 16;
  oneof content {
    bytes internal = 17;
    ExternalFrame external = 18;
    NoneFrame none = 19;
  };
  repeated VideoFrameTransformation transformations = 23;
  repeated Attribute attributes = 24;
  repeated VideoObject objects = 25;
  optional string previous_keyframe = 26;
}

message VideoFrameBatch {
  map<int64, VideoFrame> batch = 1;
}

message Message {
  string lib_version = 1;
  repeated string routing_labels = 2;
  map<string, string> propagated_context = 3;
  uint64 seq_id = 4;
  oneof content {
    VideoFrame video_frame = 5;
    VideoFrameBatch video_frame_batch = 6;
    VideoFrameUpdate video_frame_update = 7;
    UserData user_data = 8;
    EndOfStream end_of_stream = 9;
    Unknown unknown = 10;
    Shutdown shutdown = 11;
  };
}
